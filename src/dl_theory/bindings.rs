/* automatically generated by rust-bindgen */

pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[doc = "! Represents a source code location marking its beginnig and end."]
#[doc = "!"]
#[doc = "! @note Not all locations refer to physical files."]
#[doc = "! By convention, such locations use a name put in angular brackets as filename."]
#[doc = "! The string members of a location object are internalized and valid for the duration of the process."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_location {
    #[doc = "!< the file where the location begins"]
    pub begin_file: *const ::std::os::raw::c_char,
    #[doc = "!< the file where the location ends"]
    pub end_file: *const ::std::os::raw::c_char,
    #[doc = "!< the line where the location begins"]
    pub begin_line: usize,
    #[doc = "!< the line where the location ends"]
    pub end_line: usize,
    #[doc = "!< the column where the location begins"]
    pub begin_column: usize,
    #[doc = "!< the column where the location ends"]
    pub end_column: usize,
}
#[test]
fn bindgen_test_layout_clingo_location() {
    assert_eq!(
        ::std::mem::size_of::<clingo_location>(),
        48usize,
        concat!("Size of: ", stringify!(clingo_location))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_location>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_location))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_location>())).begin_file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_location),
            "::",
            stringify!(begin_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_location>())).end_file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_location),
            "::",
            stringify!(end_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_location>())).begin_line as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_location),
            "::",
            stringify!(begin_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_location>())).end_line as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_location),
            "::",
            stringify!(end_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_location>())).begin_column as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_location),
            "::",
            stringify!(begin_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_location>())).end_column as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_location),
            "::",
            stringify!(end_column)
        )
    );
}
#[doc = "! Represents a source code location marking its beginnig and end."]
#[doc = "!"]
#[doc = "! @note Not all locations refer to physical files."]
#[doc = "! By convention, such locations use a name put in angular brackets as filename."]
#[doc = "! The string members of a location object are internalized and valid for the duration of the process."]
pub type clingo_location_t = clingo_location;
#[doc = "! Represents a predicate signature."]
#[doc = "!"]
#[doc = "! Signatures have a name and an arity, and can be positive or negative (to"]
#[doc = "! represent classical negation)."]
pub type clingo_signature_t = u64;
#[doc = "! Represents a symbol."]
#[doc = "!"]
#[doc = "! This includes numbers, strings, functions (including constants when"]
#[doc = "! arguments are empty and tuples when the name is empty), <tt>\\#inf</tt> and <tt>\\#sup</tt>."]
pub type clingo_symbol_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_statistic {
    _unused: [u8; 0],
}
#[doc = "! Handle for the solver statistics."]
pub type clingo_statistics_t = clingo_statistic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_model {
    _unused: [u8; 0],
}
#[doc = "! Object representing a model."]
pub type clingo_model_t = clingo_model;
#[doc = "! Corresponding type to ::clingo_ast_comparison_operator."]
pub type clingo_ast_comparison_operator_t = ::std::os::raw::c_int;
#[doc = "! Corresponding type to ::clingo_ast_sign_t."]
pub type clingo_ast_sign_t = ::std::os::raw::c_int;
#[doc = "! Corresponding type to ::clingo_ast_unary_operator."]
pub type clingo_ast_unary_operator_t = ::std::os::raw::c_int;
#[doc = "! Corresponding type to ::clingo_ast_binary_operator."]
pub type clingo_ast_binary_operator_t = ::std::os::raw::c_int;
#[doc = "! Corresponding type to ::clingo_ast_aggregate_function."]
pub type clingo_ast_aggregate_function_t = ::std::os::raw::c_int;
#[doc = "! Corresponding type to ::clingo_ast_theory_operator_type."]
pub type clingo_ast_theory_operator_type_t = ::std::os::raw::c_int;
#[doc = "! Corresponding type to ::clingo_ast_theory_atom_definition_type."]
pub type clingo_ast_theory_atom_definition_type_t = ::std::os::raw::c_int;
#[doc = "! Corresponding type to ::clingo_ast_script_type."]
pub type clingo_ast_script_type_t = ::std::os::raw::c_int;
pub type clingo_ast_term_type_t = ::std::os::raw::c_int;
pub type clingo_ast_unary_operation_t = clingo_ast_unary_operation;
pub type clingo_ast_binary_operation_t = clingo_ast_binary_operation;
pub type clingo_ast_interval_t = clingo_ast_interval;
pub type clingo_ast_function_t = clingo_ast_function;
pub type clingo_ast_pool_t = clingo_ast_pool;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_term {
    pub location: clingo_location_t,
    pub type_: clingo_ast_term_type_t,
    pub __bindgen_anon_1: clingo_ast_term__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clingo_ast_term__bindgen_ty_1 {
    pub symbol: clingo_symbol_t,
    pub variable: *const ::std::os::raw::c_char,
    pub unary_operation: *const clingo_ast_unary_operation_t,
    pub binary_operation: *const clingo_ast_binary_operation_t,
    pub interval: *const clingo_ast_interval_t,
    pub function: *const clingo_ast_function_t,
    pub external_function: *const clingo_ast_function_t,
    pub pool: *const clingo_ast_pool_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_clingo_ast_term__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_term__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(clingo_ast_term__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_term__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_term__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).symbol as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).variable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(variable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).unary_operation as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(unary_operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).binary_operation as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(binary_operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).interval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).function as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).external_function as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(external_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_term__bindgen_ty_1>())).pool as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term__bindgen_ty_1),
            "::",
            stringify!(pool)
        )
    );
}
#[test]
fn bindgen_test_layout_clingo_ast_term() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_term>(),
        64usize,
        concat!("Size of: ", stringify!(clingo_ast_term))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_term>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_term))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_term>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_term>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_term),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_term_t = clingo_ast_term;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_unary_operation {
    pub unary_operator: clingo_ast_unary_operator_t,
    pub argument: clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_unary_operation() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_unary_operation>(),
        72usize,
        concat!("Size of: ", stringify!(clingo_ast_unary_operation))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_unary_operation>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_unary_operation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_unary_operation>())).unary_operator as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_unary_operation),
            "::",
            stringify!(unary_operator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_unary_operation>())).argument as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_unary_operation),
            "::",
            stringify!(argument)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_binary_operation {
    pub binary_operator: clingo_ast_binary_operator_t,
    pub left: clingo_ast_term_t,
    pub right: clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_binary_operation() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_binary_operation>(),
        136usize,
        concat!("Size of: ", stringify!(clingo_ast_binary_operation))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_binary_operation>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_binary_operation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_binary_operation>())).binary_operator as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_binary_operation),
            "::",
            stringify!(binary_operator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_binary_operation>())).left as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_binary_operation),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_binary_operation>())).right as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_binary_operation),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_interval {
    pub left: clingo_ast_term_t,
    pub right: clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_interval() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_interval>(),
        128usize,
        concat!("Size of: ", stringify!(clingo_ast_interval))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_interval>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_interval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_interval>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_interval),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_interval>())).right as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_interval),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_function {
    pub name: *const ::std::os::raw::c_char,
    pub arguments: *const clingo_ast_term_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_function() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_function>(),
        24usize,
        concat!("Size of: ", stringify!(clingo_ast_function))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_function>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_function>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_function),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_function>())).arguments as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_function),
            "::",
            stringify!(arguments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_function>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_function),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_pool {
    pub arguments: *const clingo_ast_term_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_pool() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_pool>(),
        16usize,
        concat!("Size of: ", stringify!(clingo_ast_pool))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_pool>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_pool))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_pool>())).arguments as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_pool),
            "::",
            stringify!(arguments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_pool>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_pool),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_csp_product_term {
    pub location: clingo_location_t,
    pub coefficient: clingo_ast_term_t,
    pub variable: *const clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_csp_product_term() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_csp_product_term>(),
        120usize,
        concat!("Size of: ", stringify!(clingo_ast_csp_product_term))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_csp_product_term>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_csp_product_term))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_csp_product_term>())).location as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_product_term),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_csp_product_term>())).coefficient as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_product_term),
            "::",
            stringify!(coefficient)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_csp_product_term>())).variable as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_product_term),
            "::",
            stringify!(variable)
        )
    );
}
pub type clingo_ast_csp_product_term_t = clingo_ast_csp_product_term;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_csp_sum_term {
    pub location: clingo_location_t,
    pub terms: *const clingo_ast_csp_product_term_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_csp_sum_term() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_csp_sum_term>(),
        64usize,
        concat!("Size of: ", stringify!(clingo_ast_csp_sum_term))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_csp_sum_term>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_csp_sum_term))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_csp_sum_term>())).location as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_sum_term),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_csp_sum_term>())).terms as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_sum_term),
            "::",
            stringify!(terms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_csp_sum_term>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_sum_term),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_csp_sum_term_t = clingo_ast_csp_sum_term;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_csp_guard {
    pub comparison: clingo_ast_comparison_operator_t,
    pub term: clingo_ast_csp_sum_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_csp_guard() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_csp_guard>(),
        72usize,
        concat!("Size of: ", stringify!(clingo_ast_csp_guard))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_csp_guard>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_csp_guard))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_csp_guard>())).comparison as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_guard),
            "::",
            stringify!(comparison)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_csp_guard>())).term as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_guard),
            "::",
            stringify!(term)
        )
    );
}
pub type clingo_ast_csp_guard_t = clingo_ast_csp_guard;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_csp_literal {
    pub term: clingo_ast_csp_sum_term_t,
    pub guards: *const clingo_ast_csp_guard_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_csp_literal() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_csp_literal>(),
        80usize,
        concat!("Size of: ", stringify!(clingo_ast_csp_literal))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_csp_literal>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_csp_literal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_csp_literal>())).term as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_literal),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_csp_literal>())).guards as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_literal),
            "::",
            stringify!(guards)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_csp_literal>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_csp_literal),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_csp_literal_t = clingo_ast_csp_literal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_id {
    pub location: clingo_location_t,
    pub id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_clingo_ast_id() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_id>(),
        56usize,
        concat!("Size of: ", stringify!(clingo_ast_id))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_id>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_id>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_id),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_id>())).id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_id),
            "::",
            stringify!(id)
        )
    );
}
pub type clingo_ast_id_t = clingo_ast_id;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_comparison {
    pub comparison: clingo_ast_comparison_operator_t,
    pub left: clingo_ast_term_t,
    pub right: clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_comparison() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_comparison>(),
        136usize,
        concat!("Size of: ", stringify!(clingo_ast_comparison))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_comparison>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_comparison))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_comparison>())).comparison as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_comparison),
            "::",
            stringify!(comparison)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_comparison>())).left as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_comparison),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_comparison>())).right as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_comparison),
            "::",
            stringify!(right)
        )
    );
}
pub type clingo_ast_comparison_t = clingo_ast_comparison;
pub type clingo_ast_literal_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_literal {
    pub location: clingo_location_t,
    pub sign: clingo_ast_sign_t,
    pub type_: clingo_ast_literal_type_t,
    pub __bindgen_anon_1: clingo_ast_literal__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clingo_ast_literal__bindgen_ty_1 {
    pub boolean: bool,
    pub symbol: *const clingo_ast_term_t,
    pub comparison: *const clingo_ast_comparison_t,
    pub csp_literal: *const clingo_ast_csp_literal_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_clingo_ast_literal__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_literal__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(clingo_ast_literal__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_literal__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_literal__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_literal__bindgen_ty_1>())).boolean as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_literal__bindgen_ty_1),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_literal__bindgen_ty_1>())).symbol as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_literal__bindgen_ty_1),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_literal__bindgen_ty_1>())).comparison as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_literal__bindgen_ty_1),
            "::",
            stringify!(comparison)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_literal__bindgen_ty_1>())).csp_literal as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_literal__bindgen_ty_1),
            "::",
            stringify!(csp_literal)
        )
    );
}
#[test]
fn bindgen_test_layout_clingo_ast_literal() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_literal>(),
        64usize,
        concat!("Size of: ", stringify!(clingo_ast_literal))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_literal>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_literal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_literal>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_literal),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_literal>())).sign as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_literal),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_literal>())).type_ as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_literal),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_literal_t = clingo_ast_literal;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_aggregate_guard {
    pub comparison: clingo_ast_comparison_operator_t,
    pub term: clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_aggregate_guard() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_aggregate_guard>(),
        72usize,
        concat!("Size of: ", stringify!(clingo_ast_aggregate_guard))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_aggregate_guard>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_aggregate_guard))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_aggregate_guard>())).comparison as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_aggregate_guard),
            "::",
            stringify!(comparison)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_aggregate_guard>())).term as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_aggregate_guard),
            "::",
            stringify!(term)
        )
    );
}
pub type clingo_ast_aggregate_guard_t = clingo_ast_aggregate_guard;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_conditional_literal {
    pub literal: clingo_ast_literal_t,
    pub condition: *const clingo_ast_literal_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_conditional_literal() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_conditional_literal>(),
        80usize,
        concat!("Size of: ", stringify!(clingo_ast_conditional_literal))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_conditional_literal>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_conditional_literal))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_conditional_literal>())).literal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_conditional_literal),
            "::",
            stringify!(literal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_conditional_literal>())).condition as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_conditional_literal),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_conditional_literal>())).size as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_conditional_literal),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_conditional_literal_t = clingo_ast_conditional_literal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_aggregate {
    pub elements: *const clingo_ast_conditional_literal_t,
    pub size: usize,
    pub left_guard: *const clingo_ast_aggregate_guard_t,
    pub right_guard: *const clingo_ast_aggregate_guard_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_aggregate() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_aggregate>(),
        32usize,
        concat!("Size of: ", stringify!(clingo_ast_aggregate))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_aggregate>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_aggregate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_aggregate>())).elements as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_aggregate),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_aggregate>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_aggregate),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_aggregate>())).left_guard as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_aggregate),
            "::",
            stringify!(left_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_aggregate>())).right_guard as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_aggregate),
            "::",
            stringify!(right_guard)
        )
    );
}
pub type clingo_ast_aggregate_t = clingo_ast_aggregate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_body_aggregate_element {
    pub tuple: *const clingo_ast_term_t,
    pub tuple_size: usize,
    pub condition: *const clingo_ast_literal_t,
    pub condition_size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_body_aggregate_element() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_body_aggregate_element>(),
        32usize,
        concat!("Size of: ", stringify!(clingo_ast_body_aggregate_element))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_body_aggregate_element>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_body_aggregate_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate_element>())).tuple as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate_element),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate_element>())).tuple_size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate_element),
            "::",
            stringify!(tuple_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate_element>())).condition as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate_element),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate_element>())).condition_size as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate_element),
            "::",
            stringify!(condition_size)
        )
    );
}
pub type clingo_ast_body_aggregate_element_t = clingo_ast_body_aggregate_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_body_aggregate {
    pub function: clingo_ast_aggregate_function_t,
    pub elements: *const clingo_ast_body_aggregate_element_t,
    pub size: usize,
    pub left_guard: *const clingo_ast_aggregate_guard_t,
    pub right_guard: *const clingo_ast_aggregate_guard_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_body_aggregate() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_body_aggregate>(),
        40usize,
        concat!("Size of: ", stringify!(clingo_ast_body_aggregate))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_body_aggregate>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_body_aggregate))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate>())).function as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate>())).elements as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_body_aggregate>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate>())).left_guard as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate),
            "::",
            stringify!(left_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_aggregate>())).right_guard as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_aggregate),
            "::",
            stringify!(right_guard)
        )
    );
}
pub type clingo_ast_body_aggregate_t = clingo_ast_body_aggregate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_head_aggregate_element {
    pub tuple: *const clingo_ast_term_t,
    pub tuple_size: usize,
    pub conditional_literal: clingo_ast_conditional_literal_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_head_aggregate_element() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_head_aggregate_element>(),
        96usize,
        concat!("Size of: ", stringify!(clingo_ast_head_aggregate_element))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_head_aggregate_element>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_head_aggregate_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_aggregate_element>())).tuple as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate_element),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_aggregate_element>())).tuple_size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate_element),
            "::",
            stringify!(tuple_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_aggregate_element>())).conditional_literal
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate_element),
            "::",
            stringify!(conditional_literal)
        )
    );
}
pub type clingo_ast_head_aggregate_element_t = clingo_ast_head_aggregate_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_head_aggregate {
    pub function: clingo_ast_aggregate_function_t,
    pub elements: *const clingo_ast_head_aggregate_element_t,
    pub size: usize,
    pub left_guard: *const clingo_ast_aggregate_guard_t,
    pub right_guard: *const clingo_ast_aggregate_guard_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_head_aggregate() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_head_aggregate>(),
        40usize,
        concat!("Size of: ", stringify!(clingo_ast_head_aggregate))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_head_aggregate>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_head_aggregate))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_aggregate>())).function as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_aggregate>())).elements as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_head_aggregate>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_aggregate>())).left_guard as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate),
            "::",
            stringify!(left_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_aggregate>())).right_guard as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_aggregate),
            "::",
            stringify!(right_guard)
        )
    );
}
pub type clingo_ast_head_aggregate_t = clingo_ast_head_aggregate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_disjunction {
    pub elements: *const clingo_ast_conditional_literal_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_disjunction() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_disjunction>(),
        16usize,
        concat!("Size of: ", stringify!(clingo_ast_disjunction))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_disjunction>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_disjunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_disjunction>())).elements as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjunction),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_disjunction>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjunction),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_disjunction_t = clingo_ast_disjunction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_disjoint_element {
    pub location: clingo_location_t,
    pub tuple: *const clingo_ast_term_t,
    pub tuple_size: usize,
    pub term: clingo_ast_csp_sum_term_t,
    pub condition: *const clingo_ast_literal_t,
    pub condition_size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_disjoint_element() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_disjoint_element>(),
        144usize,
        concat!("Size of: ", stringify!(clingo_ast_disjoint_element))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_disjoint_element>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_disjoint_element))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_disjoint_element>())).location as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint_element),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_disjoint_element>())).tuple as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint_element),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_disjoint_element>())).tuple_size as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint_element),
            "::",
            stringify!(tuple_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_disjoint_element>())).term as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint_element),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_disjoint_element>())).condition as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint_element),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_disjoint_element>())).condition_size as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint_element),
            "::",
            stringify!(condition_size)
        )
    );
}
pub type clingo_ast_disjoint_element_t = clingo_ast_disjoint_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_disjoint {
    pub elements: *const clingo_ast_disjoint_element_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_disjoint() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_disjoint>(),
        16usize,
        concat!("Size of: ", stringify!(clingo_ast_disjoint))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_disjoint>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_disjoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_disjoint>())).elements as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_disjoint>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_disjoint),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_disjoint_t = clingo_ast_disjoint;
pub type clingo_ast_theory_term_type_t = ::std::os::raw::c_int;
pub type clingo_ast_theory_function_t = clingo_ast_theory_function;
pub type clingo_ast_theory_term_array_t = clingo_ast_theory_term_array;
pub type clingo_ast_theory_unparsed_term_t = clingo_ast_theory_unparsed_term;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_theory_term {
    pub location: clingo_location_t,
    pub type_: clingo_ast_theory_term_type_t,
    pub __bindgen_anon_1: clingo_ast_theory_term__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clingo_ast_theory_term__bindgen_ty_1 {
    pub symbol: clingo_symbol_t,
    pub variable: *const ::std::os::raw::c_char,
    pub tuple: *const clingo_ast_theory_term_array_t,
    pub list: *const clingo_ast_theory_term_array_t,
    pub set: *const clingo_ast_theory_term_array_t,
    pub function: *const clingo_ast_theory_function_t,
    pub unparsed_term: *const clingo_ast_theory_unparsed_term_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_term__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_term__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_term__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term__bindgen_ty_1>())).symbol as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term__bindgen_ty_1>())).variable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1),
            "::",
            stringify!(variable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term__bindgen_ty_1>())).tuple as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term__bindgen_ty_1>())).list as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term__bindgen_ty_1>())).set as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term__bindgen_ty_1>())).function as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term__bindgen_ty_1>())).unparsed_term
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term__bindgen_ty_1),
            "::",
            stringify!(unparsed_term)
        )
    );
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_term() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_term>(),
        64usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_term))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_term>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_term))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_term>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_term>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_theory_term_t = clingo_ast_theory_term;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_term_array {
    pub terms: *const clingo_ast_theory_term_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_term_array() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_term_array>(),
        16usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_term_array))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_term_array>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_term_array))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term_array>())).terms as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term_array),
            "::",
            stringify!(terms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term_array>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term_array),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_function {
    pub name: *const ::std::os::raw::c_char,
    pub arguments: *const clingo_ast_theory_term_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_function() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_function>(),
        24usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_function))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_function>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_function>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_function),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_function>())).arguments as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_function),
            "::",
            stringify!(arguments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_function>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_function),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_theory_unparsed_term_element {
    pub operators: *const *const ::std::os::raw::c_char,
    pub size: usize,
    pub term: clingo_ast_theory_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_unparsed_term_element() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_unparsed_term_element>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(clingo_ast_theory_unparsed_term_element)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_unparsed_term_element>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_theory_unparsed_term_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_unparsed_term_element>())).operators
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_unparsed_term_element),
            "::",
            stringify!(operators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_unparsed_term_element>())).size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_unparsed_term_element),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_unparsed_term_element>())).term as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_unparsed_term_element),
            "::",
            stringify!(term)
        )
    );
}
pub type clingo_ast_theory_unparsed_term_element_t = clingo_ast_theory_unparsed_term_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_unparsed_term {
    pub elements: *const clingo_ast_theory_unparsed_term_element_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_unparsed_term() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_unparsed_term>(),
        16usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_unparsed_term))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_unparsed_term>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_unparsed_term))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_unparsed_term>())).elements as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_unparsed_term),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_unparsed_term>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_unparsed_term),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_atom_element {
    pub tuple: *const clingo_ast_theory_term_t,
    pub tuple_size: usize,
    pub condition: *const clingo_ast_literal_t,
    pub condition_size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_atom_element() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_atom_element>(),
        32usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_atom_element))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_atom_element>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_atom_element))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_element>())).tuple as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_element),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_element>())).tuple_size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_element),
            "::",
            stringify!(tuple_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_element>())).condition as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_element),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_element>())).condition_size as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_element),
            "::",
            stringify!(condition_size)
        )
    );
}
pub type clingo_ast_theory_atom_element_t = clingo_ast_theory_atom_element;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_theory_guard {
    pub operator_name: *const ::std::os::raw::c_char,
    pub term: clingo_ast_theory_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_guard() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_guard>(),
        72usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_guard))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_guard>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_guard))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_guard>())).operator_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_guard),
            "::",
            stringify!(operator_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_guard>())).term as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_guard),
            "::",
            stringify!(term)
        )
    );
}
pub type clingo_ast_theory_guard_t = clingo_ast_theory_guard;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_theory_atom {
    pub term: clingo_ast_term_t,
    pub elements: *const clingo_ast_theory_atom_element_t,
    pub size: usize,
    pub guard: *const clingo_ast_theory_guard_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_atom() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_atom>(),
        88usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_atom))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_atom>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_atom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_atom>())).term as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_atom>())).elements as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_atom>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_theory_atom>())).guard as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom),
            "::",
            stringify!(guard)
        )
    );
}
pub type clingo_ast_theory_atom_t = clingo_ast_theory_atom;
pub type clingo_ast_head_literal_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_head_literal {
    pub location: clingo_location_t,
    pub type_: clingo_ast_head_literal_type_t,
    pub __bindgen_anon_1: clingo_ast_head_literal__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clingo_ast_head_literal__bindgen_ty_1 {
    pub literal: *const clingo_ast_literal_t,
    pub disjunction: *const clingo_ast_disjunction_t,
    pub aggregate: *const clingo_ast_aggregate_t,
    pub head_aggregate: *const clingo_ast_head_aggregate_t,
    pub theory_atom: *const clingo_ast_theory_atom_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_clingo_ast_head_literal__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_head_literal__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(clingo_ast_head_literal__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_head_literal__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_head_literal__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_literal__bindgen_ty_1>())).literal as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_literal__bindgen_ty_1),
            "::",
            stringify!(literal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_literal__bindgen_ty_1>())).disjunction
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_literal__bindgen_ty_1),
            "::",
            stringify!(disjunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_literal__bindgen_ty_1>())).aggregate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_literal__bindgen_ty_1),
            "::",
            stringify!(aggregate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_literal__bindgen_ty_1>())).head_aggregate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_literal__bindgen_ty_1),
            "::",
            stringify!(head_aggregate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_literal__bindgen_ty_1>())).theory_atom
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_literal__bindgen_ty_1),
            "::",
            stringify!(theory_atom)
        )
    );
}
#[test]
fn bindgen_test_layout_clingo_ast_head_literal() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_head_literal>(),
        64usize,
        concat!("Size of: ", stringify!(clingo_ast_head_literal))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_head_literal>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_head_literal))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_head_literal>())).location as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_literal),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_head_literal>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_head_literal),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_head_literal_t = clingo_ast_head_literal;
pub type clingo_ast_body_literal_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_body_literal {
    pub location: clingo_location_t,
    pub sign: clingo_ast_sign_t,
    pub type_: clingo_ast_body_literal_type_t,
    pub __bindgen_anon_1: clingo_ast_body_literal__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clingo_ast_body_literal__bindgen_ty_1 {
    pub literal: *const clingo_ast_literal_t,
    pub conditional: *const clingo_ast_conditional_literal_t,
    pub aggregate: *const clingo_ast_aggregate_t,
    pub body_aggregate: *const clingo_ast_body_aggregate_t,
    pub theory_atom: *const clingo_ast_theory_atom_t,
    pub disjoint: *const clingo_ast_disjoint_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_clingo_ast_body_literal__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_body_literal__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_body_literal__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_literal__bindgen_ty_1>())).literal as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1),
            "::",
            stringify!(literal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_literal__bindgen_ty_1>())).conditional
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1),
            "::",
            stringify!(conditional)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_literal__bindgen_ty_1>())).aggregate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1),
            "::",
            stringify!(aggregate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_literal__bindgen_ty_1>())).body_aggregate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1),
            "::",
            stringify!(body_aggregate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_literal__bindgen_ty_1>())).theory_atom
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1),
            "::",
            stringify!(theory_atom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_literal__bindgen_ty_1>())).disjoint as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal__bindgen_ty_1),
            "::",
            stringify!(disjoint)
        )
    );
}
#[test]
fn bindgen_test_layout_clingo_ast_body_literal() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_body_literal>(),
        64usize,
        concat!("Size of: ", stringify!(clingo_ast_body_literal))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_body_literal>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_body_literal))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_body_literal>())).location as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_body_literal>())).sign as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_body_literal>())).type_ as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_body_literal),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_body_literal_t = clingo_ast_body_literal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_operator_definition {
    pub location: clingo_location_t,
    pub name: *const ::std::os::raw::c_char,
    pub priority: ::std::os::raw::c_uint,
    pub type_: clingo_ast_theory_operator_type_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_operator_definition() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_operator_definition>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(clingo_ast_theory_operator_definition)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_operator_definition>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_theory_operator_definition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_operator_definition>())).location as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_operator_definition),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_operator_definition>())).name as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_operator_definition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_operator_definition>())).priority as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_operator_definition),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_operator_definition>())).type_ as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_operator_definition),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_theory_operator_definition_t = clingo_ast_theory_operator_definition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_term_definition {
    pub location: clingo_location_t,
    pub name: *const ::std::os::raw::c_char,
    pub operators: *const clingo_ast_theory_operator_definition_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_term_definition() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_term_definition>(),
        72usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_term_definition))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_term_definition>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_theory_term_definition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term_definition>())).location as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term_definition),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term_definition>())).name as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term_definition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term_definition>())).operators as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term_definition),
            "::",
            stringify!(operators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_term_definition>())).size as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_term_definition),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_theory_term_definition_t = clingo_ast_theory_term_definition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_guard_definition {
    pub term: *const ::std::os::raw::c_char,
    pub operators: *const *const ::std::os::raw::c_char,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_guard_definition() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_guard_definition>(),
        24usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_guard_definition))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_guard_definition>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_theory_guard_definition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_guard_definition>())).term as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_guard_definition),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_guard_definition>())).operators as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_guard_definition),
            "::",
            stringify!(operators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_guard_definition>())).size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_guard_definition),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_theory_guard_definition_t = clingo_ast_theory_guard_definition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_atom_definition {
    pub location: clingo_location_t,
    pub type_: clingo_ast_theory_atom_definition_type_t,
    pub name: *const ::std::os::raw::c_char,
    pub arity: ::std::os::raw::c_uint,
    pub elements: *const ::std::os::raw::c_char,
    pub guard: *const clingo_ast_theory_guard_definition_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_atom_definition() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_atom_definition>(),
        88usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_atom_definition))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_atom_definition>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_theory_atom_definition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_definition>())).location as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_definition),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_definition>())).type_ as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_definition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_definition>())).name as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_definition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_definition>())).arity as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_definition),
            "::",
            stringify!(arity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_definition>())).elements as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_definition),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_atom_definition>())).guard as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_atom_definition),
            "::",
            stringify!(guard)
        )
    );
}
pub type clingo_ast_theory_atom_definition_t = clingo_ast_theory_atom_definition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_theory_definition {
    pub name: *const ::std::os::raw::c_char,
    pub terms: *const clingo_ast_theory_term_definition_t,
    pub terms_size: usize,
    pub atoms: *const clingo_ast_theory_atom_definition_t,
    pub atoms_size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_theory_definition() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_theory_definition>(),
        40usize,
        concat!("Size of: ", stringify!(clingo_ast_theory_definition))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_theory_definition>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_theory_definition))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_definition>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_definition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_definition>())).terms as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_definition),
            "::",
            stringify!(terms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_definition>())).terms_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_definition),
            "::",
            stringify!(terms_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_definition>())).atoms as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_definition),
            "::",
            stringify!(atoms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_theory_definition>())).atoms_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_theory_definition),
            "::",
            stringify!(atoms_size)
        )
    );
}
pub type clingo_ast_theory_definition_t = clingo_ast_theory_definition;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_rule {
    pub head: clingo_ast_head_literal_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_rule() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_rule>(),
        80usize,
        concat!("Size of: ", stringify!(clingo_ast_rule))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_rule>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_rule))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_rule>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_rule),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_rule>())).body as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_rule),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_rule>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_rule),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_rule_t = clingo_ast_rule;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_definition {
    pub name: *const ::std::os::raw::c_char,
    pub value: clingo_ast_term_t,
    pub is_default: bool,
}
#[test]
fn bindgen_test_layout_clingo_ast_definition() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_definition>(),
        80usize,
        concat!("Size of: ", stringify!(clingo_ast_definition))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_definition>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_definition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_definition>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_definition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_definition>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_definition),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_definition>())).is_default as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_definition),
            "::",
            stringify!(is_default)
        )
    );
}
pub type clingo_ast_definition_t = clingo_ast_definition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_show_signature {
    pub signature: clingo_signature_t,
    pub csp: bool,
}
#[test]
fn bindgen_test_layout_clingo_ast_show_signature() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_show_signature>(),
        16usize,
        concat!("Size of: ", stringify!(clingo_ast_show_signature))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_show_signature>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_show_signature))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_show_signature>())).signature as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_show_signature),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_show_signature>())).csp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_show_signature),
            "::",
            stringify!(csp)
        )
    );
}
pub type clingo_ast_show_signature_t = clingo_ast_show_signature;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_show_term {
    pub term: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: usize,
    pub csp: bool,
}
#[test]
fn bindgen_test_layout_clingo_ast_show_term() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_show_term>(),
        88usize,
        concat!("Size of: ", stringify!(clingo_ast_show_term))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_show_term>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_show_term))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_show_term>())).term as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_show_term),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_show_term>())).body as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_show_term),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_show_term>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_show_term),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_show_term>())).csp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_show_term),
            "::",
            stringify!(csp)
        )
    );
}
pub type clingo_ast_show_term_t = clingo_ast_show_term;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_defined {
    pub signature: clingo_signature_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_defined() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_defined>(),
        8usize,
        concat!("Size of: ", stringify!(clingo_ast_defined))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_defined>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_defined))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_defined>())).signature as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_defined),
            "::",
            stringify!(signature)
        )
    );
}
pub type clingo_ast_defined_t = clingo_ast_defined;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_minimize {
    pub weight: clingo_ast_term_t,
    pub priority: clingo_ast_term_t,
    pub tuple: *const clingo_ast_term_t,
    pub tuple_size: usize,
    pub body: *const clingo_ast_body_literal_t,
    pub body_size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_minimize() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_minimize>(),
        160usize,
        concat!("Size of: ", stringify!(clingo_ast_minimize))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_minimize>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_minimize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_minimize>())).weight as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_minimize),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_minimize>())).priority as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_minimize),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_minimize>())).tuple as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_minimize),
            "::",
            stringify!(tuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_minimize>())).tuple_size as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_minimize),
            "::",
            stringify!(tuple_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_minimize>())).body as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_minimize),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_minimize>())).body_size as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_minimize),
            "::",
            stringify!(body_size)
        )
    );
}
pub type clingo_ast_minimize_t = clingo_ast_minimize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_script {
    pub type_: clingo_ast_script_type_t,
    pub code: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_clingo_ast_script() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_script>(),
        16usize,
        concat!("Size of: ", stringify!(clingo_ast_script))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_script>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_script))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_script>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_script),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_script>())).code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_script),
            "::",
            stringify!(code)
        )
    );
}
pub type clingo_ast_script_t = clingo_ast_script;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_ast_program {
    pub name: *const ::std::os::raw::c_char,
    pub parameters: *const clingo_ast_id_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_program() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_program>(),
        24usize,
        concat!("Size of: ", stringify!(clingo_ast_program))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_program>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_program))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_program>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_program),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_program>())).parameters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_program),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_program>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_program),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_program_t = clingo_ast_program;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_external {
    pub atom: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: usize,
    pub type_: clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_external() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_external>(),
        144usize,
        concat!("Size of: ", stringify!(clingo_ast_external))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_external>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_external))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_external>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_external),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_external>())).body as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_external),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_external>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_external),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_external>())).type_ as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_external),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_external_t = clingo_ast_external;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_edge {
    pub u: clingo_ast_term_t,
    pub v: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_edge() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_edge>(),
        144usize,
        concat!("Size of: ", stringify!(clingo_ast_edge))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_edge>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_edge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_edge>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_edge),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_edge>())).v as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_edge),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_edge>())).body as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_edge),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_edge>())).size as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_edge),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_edge_t = clingo_ast_edge;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_heuristic {
    pub atom: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: usize,
    pub bias: clingo_ast_term_t,
    pub priority: clingo_ast_term_t,
    pub modifier: clingo_ast_term_t,
}
#[test]
fn bindgen_test_layout_clingo_ast_heuristic() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_heuristic>(),
        272usize,
        concat!("Size of: ", stringify!(clingo_ast_heuristic))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_heuristic>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_heuristic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_heuristic>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_heuristic),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_heuristic>())).body as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_heuristic),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_heuristic>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_heuristic),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_heuristic>())).bias as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_heuristic),
            "::",
            stringify!(bias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_heuristic>())).priority as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_heuristic),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_heuristic>())).modifier as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_heuristic),
            "::",
            stringify!(modifier)
        )
    );
}
pub type clingo_ast_heuristic_t = clingo_ast_heuristic;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_project {
    pub atom: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_clingo_ast_project() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_project>(),
        80usize,
        concat!("Size of: ", stringify!(clingo_ast_project))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_project>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_project))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_project>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_project),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_project>())).body as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_project),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_project>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_project),
            "::",
            stringify!(size)
        )
    );
}
pub type clingo_ast_project_t = clingo_ast_project;
pub type clingo_ast_statement_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingo_ast_statement {
    pub location: clingo_location_t,
    pub type_: clingo_ast_statement_type_t,
    pub __bindgen_anon_1: clingo_ast_statement__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clingo_ast_statement__bindgen_ty_1 {
    pub rule: *const clingo_ast_rule_t,
    pub definition: *const clingo_ast_definition_t,
    pub show_signature: *const clingo_ast_show_signature_t,
    pub show_term: *const clingo_ast_show_term_t,
    pub minimize: *const clingo_ast_minimize_t,
    pub script: *const clingo_ast_script_t,
    pub program: *const clingo_ast_program_t,
    pub external: *const clingo_ast_external_t,
    pub edge: *const clingo_ast_edge_t,
    pub heuristic: *const clingo_ast_heuristic_t,
    pub project_atom: *const clingo_ast_project_t,
    pub project_signature: clingo_signature_t,
    pub theory_definition: *const clingo_ast_theory_definition_t,
    pub defined: *const clingo_ast_defined_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_clingo_ast_statement__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_statement__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(clingo_ast_statement__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_statement__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(clingo_ast_statement__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).rule as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(rule)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).definition as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(definition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).show_signature
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(show_signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).show_term as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(show_term)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).minimize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(minimize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).script as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(script)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).program as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).external as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(external)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).edge as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(edge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).heuristic as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(heuristic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).project_atom as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(project_atom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).project_signature
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(project_signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).theory_definition
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(theory_definition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingo_ast_statement__bindgen_ty_1>())).defined as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement__bindgen_ty_1),
            "::",
            stringify!(defined)
        )
    );
}
#[test]
fn bindgen_test_layout_clingo_ast_statement() {
    assert_eq!(
        ::std::mem::size_of::<clingo_ast_statement>(),
        64usize,
        concat!("Size of: ", stringify!(clingo_ast_statement))
    );
    assert_eq!(
        ::std::mem::align_of::<clingo_ast_statement>(),
        8usize,
        concat!("Alignment of ", stringify!(clingo_ast_statement))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_statement>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingo_ast_statement>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(clingo_ast_statement),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingo_ast_statement_t = clingo_ast_statement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_control {
    _unused: [u8; 0],
}
#[doc = "! Control object holding grounding and solving state."]
pub type clingo_control_t = clingo_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingo_options {
    _unused: [u8; 0],
}
#[doc = "! Object to add command-line options."]
pub type clingo_options_t = clingo_options;
pub type clingodl_value_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clingodl_value {
    pub type_: clingodl_value_type_t,
    pub __bindgen_anon_1: clingodl_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clingodl_value__bindgen_ty_1 {
    pub int_number: ::std::os::raw::c_int,
    pub double_number: f64,
    pub symbol: clingo_symbol_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_clingodl_value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<clingodl_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(clingodl_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<clingodl_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(clingodl_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingodl_value__bindgen_ty_1>())).int_number as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingodl_value__bindgen_ty_1),
            "::",
            stringify!(int_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingodl_value__bindgen_ty_1>())).double_number as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingodl_value__bindgen_ty_1),
            "::",
            stringify!(double_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<clingodl_value__bindgen_ty_1>())).symbol as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingodl_value__bindgen_ty_1),
            "::",
            stringify!(symbol)
        )
    );
}
#[test]
fn bindgen_test_layout_clingodl_value() {
    assert_eq!(
        ::std::mem::size_of::<clingodl_value>(),
        16usize,
        concat!("Size of: ", stringify!(clingodl_value))
    );
    assert_eq!(
        ::std::mem::align_of::<clingodl_value>(),
        8usize,
        concat!("Alignment of ", stringify!(clingodl_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clingodl_value>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clingodl_value),
            "::",
            stringify!(type_)
        )
    );
}
pub type clingodl_value_t = clingodl_value;
#[doc = "! Callback to rewrite statements (see ::clingodl_rewrite_statement)."]
pub type clingodl_rewrite_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        statement: *const clingo_ast_statement_t,
        data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clingodl_theory {
    _unused: [u8; 0],
}
pub type clingodl_theory_t = clingodl_theory;
extern "C" {
    #[doc = "! creates the theory"]
    pub fn clingodl_create(theory: *mut *mut clingodl_theory_t) -> bool;
}
extern "C" {
    #[doc = "! registers the theory with the control"]
    pub fn clingodl_register(
        theory: *mut clingodl_theory_t,
        control: *mut clingo_control_t,
    ) -> bool;
}
extern "C" {
    #[doc = "! Rewrite statements before adding them via the given callback."]
    pub fn clingodl_rewrite_statement(
        theory: *mut clingodl_theory_t,
        stm: *const clingo_ast_statement_t,
        add: clingodl_rewrite_callback_t,
        data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[doc = "! prepare the theory between grounding and solving"]
    pub fn clingodl_prepare(theory: *mut clingodl_theory_t, control: *mut clingo_control_t)
        -> bool;
}
extern "C" {
    #[doc = "! destroys the theory, currently no way to unregister a theory"]
    pub fn clingodl_destroy(theory: *mut clingodl_theory_t) -> bool;
}
extern "C" {
    #[doc = "! configure theory manually (without using clingo's options facility)"]
    #[doc = "! Note that the theory has to be configured before registering it and cannot be reconfigured."]
    pub fn clingodl_configure(
        theory: *mut clingodl_theory_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[doc = "! add options for your theory"]
    pub fn clingodl_register_options(
        theory: *mut clingodl_theory_t,
        options: *mut clingo_options_t,
    ) -> bool;
}
extern "C" {
    #[doc = "! validate options for your theory"]
    pub fn clingodl_validate_options(theory: *mut clingodl_theory_t) -> bool;
}
extern "C" {
    #[doc = "! callback on every model"]
    pub fn clingodl_on_model(theory: *mut clingodl_theory_t, model: *mut clingo_model_t) -> bool;
}
extern "C" {
    #[doc = "! obtain a symbol index which can be used to get the value of a symbol"]
    #[doc = "! returns true if the symbol exists"]
    #[doc = "! does not throw"]
    pub fn clingodl_lookup_symbol(
        theory: *mut clingodl_theory_t,
        symbol: clingo_symbol_t,
        index: *mut usize,
    ) -> bool;
}
extern "C" {
    #[doc = "! obtain the symbol at the given index"]
    #[doc = "! does not throw"]
    pub fn clingodl_get_symbol(theory: *mut clingodl_theory_t, index: usize) -> clingo_symbol_t;
}
extern "C" {
    #[doc = "! initialize index so that it can be used with clingodl_assignment_next"]
    #[doc = "! does not throw"]
    pub fn clingodl_assignment_begin(
        theory: *mut clingodl_theory_t,
        thread_id: u32,
        index: *mut usize,
    );
}
extern "C" {
    #[doc = "! move to the next index that has a value"]
    #[doc = "! returns true if the updated index is valid"]
    #[doc = "! does not throw"]
    pub fn clingodl_assignment_next(
        theory: *mut clingodl_theory_t,
        thread_id: u32,
        index: *mut usize,
    ) -> bool;
}
extern "C" {
    #[doc = "! check if the symbol at the given index has a value"]
    #[doc = "! does not throw"]
    pub fn clingodl_assignment_has_value(
        theory: *mut clingodl_theory_t,
        thread_id: u32,
        index: usize,
    ) -> bool;
}
extern "C" {
    #[doc = "! get the symbol and it's value at the given index"]
    #[doc = "! does not throw"]
    pub fn clingodl_assignment_get_value(
        theory: *mut clingodl_theory_t,
        thread_id: u32,
        index: usize,
        value: *mut clingodl_value_t,
    );
}
extern "C" {
    #[doc = "! callback on statistic updates"]
    #[doc = " please add a subkey with the name of your theory"]
    pub fn clingodl_on_statistics(
        theory: *mut clingodl_theory_t,
        step: *mut clingo_statistics_t,
        accu: *mut clingo_statistics_t,
    ) -> bool;
}
